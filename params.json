{"name":"Ggg","tagline":"Ggg Language spec and Ggg to javascript compiler","body":"Ggg programming language & interpreter\r\n\r\nTo test compiler, go [here](/Ggg/entry)\r\n\r\nGgg is programming language built on top of brainfuck, which is built on top of\r\n`P′′` programming language. It's very simple with just a few constructs and\r\nsymbols. Main reason of creation of this language is extending of brainfuck with\r\nsome quite needed features.\r\n\r\nValid symbols:\r\nSymbols in tokens: `G`, `g`, other characters are used to break sets of symbols into tokens.\r\n\r\nIn Ggg version g there are 8 basic commands which are also only valid tokens, based on those from brainfuck:\r\n\r\n`G`   as `+` (increment byte)\r\n\r\n`g`   as `-` (decrement byte)\r\n\r\n`gG`  as `>` (increment pointer, go right)\r\n\r\n`Gg`  as `<` (decrement pointer, go left)\r\n\r\n`gg`  as `[` (if data byte zero, jump to forward `GG`)\r\n\r\n`GG`  as `]` (if data byte nonzero, jump backward to `gg`)\r\n\r\n`GGG` as `.` (output byte)\r\n\r\n`ggg` as `,` (input byte)\r\n\r\nCommands should be divided by other characters or whitespace (including line\r\nfeed). Minimal requirement for the compilable program: \r\n- there is either `gg` and `GG` in order, either there are none of those commands \r\n    in the code. There is no need for having a parity of those tokens, only \r\n    the order and having at least one `gg` and `GG` is needed. Programs breaking \r\n    this rule would not compile. Not adhering to the rule results with\r\n    syntax error.\r\n- there are no symbols containing `g` and `G` without other characters that are also\r\n    not a command. So in Ggg g the symbol `gGg` is illegal and creates compilation\r\n    error, similar situation is with longer chains of `g`s and `G`s, like `gggg`.\r\n    Not adhering to the rule results with lexical error.\r\n\r\nGgg is extensible, so there is possibility to add more commands, like declaring \r\nconstants.\r\nProposed additional functionalities:\r\n -  Integer literals\r\n -  Simple macros\r\n -  Different I/O functions\r\n\r\nGgg G integer literals known as g-binary\r\nLiterals are created using symbols g and G as one word without any other\r\ncharacters inbetween. G symbol means g-binary 1 and g symbol means g-binary 0.\r\nScheme for creating integer g-binary literal:\r\ng-binary-command address g-binary-value\r\nBoth address and g-binary-value can contain any number of (reasonable)\r\nvalues, including not paired gg and GG.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}